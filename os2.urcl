// Tuke's URCL OS 2 (Electric Boogaloo)

// URCL HEADER
BITS >= 16
MINREG 4
MINRAM 256
RUN RAM

JMP .Main

// Load files (using STR)

// Instruction to Address Table
.InstructionTable
DW .Push // 1
DW .Pop // 2
DW .BinaryOperation // 3-5 // XOR AND OR
DW .Operation // 6-10 // ADD SUB MLT DIV MOD (2 operand)
DW .ShiftLeft // 11
DW .ShiftRight // 12
DW .Branch // 13-16 // BRZ BNZ BRP BRN
DW .Jump // 17
DW .LoadMemory // 18
DW .StoreMemory // 19
DW .Input // 20
DW .Output // 21
DW .Swap // 22
DW .Copy // 23
DW .SystemCall // 24
DW .Halt // 25

// System Calls
.SystemCalls
DW .Exit 

// File Information
.Files // Space for 8 files
// Format: {name} {format} {length} {address}
DQ 0
DQ 0
DQ 0
DQ 0
DQ 0
DQ 0
DQ 0
DQ 0

//* Interpreter Variables *//
.Pointer // Stores the address of the next instruction to be executed
DW 0x0000

.Instruction // Stores the instruction to execute when calling .Execute
DW 0x0000

.Halted // Stores whether the current program has been halted (must be reseted whenever a new program is started)
DW 0x0000

.ProgramLimit // Stores the limit of the program currently executed (global address) (inclusive)
DW 0x0000

//* File Scan Variables *//
.MaxFiles // Stores the maximum amount of files multiplied by 4 (Total = maximum amount of file info words)
DW 0x0020

.LengthOfFile // Stores the length of the file
DW 0x0000

//* Constants *//
.ProgramMemoryLimit // Stores the limit of the memory for programs (inclusive)
DW 0xFFFF // 65535

.KernelMemoryLimit // Stores the limit of the memory for the kernel (exclusive)
DW 0x0200 // 512

.ScanFiles
	// Scans the files stored in memory and writes their info on the file info table (.Files)

	LOD R1, .Files // R1 = File Table Address
	IMM R2, .KernelMemoryLimit // R2 = Address of the file currently scanning

	.Loop2
		IMM R4, 3
		.Loop3 //loop to copy file contents
			LOD R3, R2 // R3 = data of header of file
			STR R1, R3 // Store the data on the file table
			
			INC R2, R2 // Increment the address
			DEC R4, R4
			BNZ .Loop3
        
		STR .LengthOfFile, R3 // yeah

		LOD R3, R2 // R3 = data of header of file
		STR R1, R3 // Store the data on the file table

		INC R2, R2 // Increment the address

		// jump to the end of the file
		LOD R4, .LengthOfFile
		ADD R2, R2, R4 // Increment by length of file so that the index is at the start of the next file
        LOD R3, R2 //check if 0
		BRZ .EndLoop2 // end if no more file

		JMP .Loop2 // loop again if more file
	.EndLoop2

	RET

.Shell
    OUT %79, 0x3E //>
    OUT %79, 0x20 //space
    PSH 0
    .ShellLoop
        IN R1, %79
        OUT %79, R1
        BRE .ShellLoopEnd, R1, 0x20
        BRE .ShellLoopEnd, R1, 0x0A
        PSH R1
        BRE .SlashCommands, R1, 0x2F
        BRA .ShellLoop
    .ShellLoopEnd
    POP R1
    BRE .Clear, R1, 0x72
    BRE .Ls, R1, 0x73
    BRE .Exit, R1, 0x74
.ShellEnd2
CAL .ShellEnd
BRA .Error5

.Clear
    POP R1
    BNE .Error5, R1, 0x61
    POP R1
    BNE .Error5, R1, 0x65
    POP R1
    BNE .Error5, R1, 0x6C
    POP R1
    BNE .Error5, R1, 0x63
    CAL .ShellEnd
    OUT %79, 0x1B //escape code to clear console
    OUT %79, 0x
    OUT %79, 0x32
    OUT %79, 0x6A
    BRA .Shell

.Ls
    POP R1
    BNE .Error5, R1, 0x6C
    CAL .ShellEnd
    BRA .ListPrograms

.Exit
    POP R1
    BNE .Error5, R1, 0x69 //nice
    POP R1
    BNE .Error5, R1, 0x78
    POP R1
    BNE .Error5, R1, 0x65
    HLT

.SlashCommands
POP R1
BNE .Error5, R1, 0x2F
POP R1
BNE .Error5, R1, 0x2E
CAL .ShellEnd
BRA .RunProgram

.Execute
	// TODO figure out optimizations
    AND R2, R2, 0x1F
    BRZ .ExecEnd
    IMM R3, .InstructionAddressTable
    ADD R2, R2, R3 //add offset to instruction table
    LOD R2, R2 //load call address
    CAL R2 //call instruction
    .ExecEnd
	RET

.InterpretationLoop // The loop that is ran for running a program (calling .Execute per instruction)
	STR .Halted, 0 // not halted

	// R1 = Pointer
	// R3 = Temp
	LOD R1, .Pointer

	.Loop3
		// Check if reached the end of a program or halted
		LOD R3, .Halted // R3 = mem[.Halted]
		BNZ .EndLoop3

		LOD R3, .ProgramLimit
		BGE .EndLoop3, R1, R3

		INC R1, R1 // Update PC

		// R2 = instruction
		LOD R2, R1 // R2 = mem[R1(pointer)]
		R2 // instruction = R2

		CAL .Execute		
	.EndLoop3

	// Prepare for next program being executed (reset variables)
	STR .Pointer, 0
	STR .Halted, 0
	STR .Execute, 0

	RET

.RunProgram // Asks the user for a program to run and runs it
	//* Ask for program *//
	//* Display loaded files
	OUT %79, 0x46 // "F"
	OUT %79, 0x3A // ":"
	OUT %79, 0x20 // " "

	// R1 = File pointer
    IMM R1, 0 //set file pointer to 0
	.Loop1
		LOD R2, R1 // R2 = mem[R1]
		BRZ .EndLoop1, R2 // Branch if no more files
		// If file: output file name
		OUT %79, R2 // file name
		OUT %79, 0x2C // ","
		OUT %79, 0x20 // " "
		ADD R1, R1, 4 // Increment file pointer to next file
		JMP .Loop1
	.EndLoop1

	IN R1, %79 // Get file index
	SUB R1, R1, 0x30 // Move it to "0" = 0
    BSL R1, R1, 2 // Multiply it by 4 to get an address to the file table
	ADD R1, R1, .Files // Point to the file table
	ADD R1, R1, 3 // Point it to the global address
    LOD R2, .MaxFiles
    BRG .FileDoesNotExist, R1, R2
    LOD R2, R1
    BZR .FileDoesNotExist, R2

    ADD R1, R1, 4
	STR .Pointer, R1 // .Pointer = R1
	// TODO set .ProgramLimit to the limit of the file (inclusive) (read description of the variable)

	CAL .InterpretationLoop // Start executing program

	RET // After the program has been run

.Main
	CAL .ScanFiles

	CAL .RunProgram

	HLT

//* INSTRUCTIONS *//

//* ERRORS *//
.FileDoesNotExist
IMM R1, 0x30
JMP .Error

.Error
// R1 = error num
OUT %79, 0x45 // "E"
OUT %79, 0x72 // "r"
OUT %79, 0x72 // "r"
OUT %79, 0x6F // "o"
OUT %79, 0x72 // "r"
OUT %79, 0x20 // " "
OUT %79, R1 // "wat" 
OUT %79, 0x0A // "\n"
JMP .Shell // Coming soon to a URCL near you !