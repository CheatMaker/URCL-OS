//
// Tuke and Verlio's take at URCL OS
//

BITS >= 16
MINREG 3
MINRAM 1120
RUN RAM

BRA .Boot
@org 0x400

// Load files
.Page1
	DW 0x4142 // header // "B" - "BEAN CONSOLE v0.1" // 1 Page(s) (Writen by Tuke)

	DW 1 //push
	DW 0x20B // PROGRAM END(HALT) (JUMP TARGET)

	DW 1 //push
	DW 0x42 // "B"
	DW 22 //input
	DW 10 //subtract
	DW 17 //branch if not zero // BRANCH TO END
	DW 1 //push
	DW 1 //Beans
	DW 26 //system call

	DW 27 // #0x20B
@org 0x420
.Page2
	DW 0x4269 // header // 'i' - "Program Installer v0.1" // 2 Page(s) (Writen by Verlio)
	DW 1 //push jump address for after verifying the header
	DW 0x231 
	DW 1 //push current read address
	DW 0
	DW 1 //pushes to push system calls
	DW 2
	DW 1
	DW 4
	DW 26 //system calls to set the address and to read
	DW 26
	DW 1 //pushing correct header
	DW 0b10101010
	DW 10 //subtracting and branching to verify header
	DW 16
	DW 27 //halt for if header is incorrect
	DW 22 //inputing the length of the file
	DW 1 //pushing 1 for the swap
	DW 1
	DW 24 //swap to put the length under the current read address
	DW 7 //incriment the adress being read from
	DW 1 //pushes to push system calls
	DW 2
	DW 1
	DW 4
	DW 26 //system calls to read drive
	DW 26
	DW 24 //system call to swap the read value under the read address for the store
	DW 1 //pushing the offset
	DW 0x260
	DW 9 //adding the offset to the write address
	DW 21 //store
@org 0x440
.Page3
	DW 0x8000 //body
	DW 1 //pushing the offset again
	DW 0x460
	DW 10 //subtracting the offset
	DW 1 //pushing 1 for the swap
	DW 1
	DW 24 //swaping the length above the read address
	DW 8 //decrementing one from the length
	DW 25 //copying the length so it stays after the branch
	DW 1 //pushing the jump address
	DW 0x230
	DW 1 //pushing 1 for the swap
	DW 1
	DW 24 //swapping to get to the jump address under the length so the branch works
	DW 17 //the branch
	DW 2 //popping the jump address
	DW 2 //popping the length (should be 0) so that the stack is entirely clean in theory
	DW 27 //halt
@org 0

// Instruction-Address Table
.InstructionAddressTable
DW 0
DW .Push // 1
DW .Pop // 2
DW .And // 3
DW .Or // 4
DW .Xor // 5
DW .Not // 6
DW .Increment // 7
DW .Decrement // 8
DW .Add // 9
DW .Subtract // 10
DW .Multiply // 11
DW .Divide // 12
DW .Modulo // 13
DW .ShiftLeft // 14
DW .ShiftRight // 15
DW .BranchIfZero // 16
DW .BranchIfNotZero // 17
DW .BranchIfPositive // 18
DW .BranchIfNegative // 19
DW .LoadMemory // 20
DW .StoreMemory // 21
DW .Input // 22
DW .Output // 23
DW .Swap //24
DW .Copy //25
DW .SystemCall // 26
DW .Shell //27
DW .Error4
DW .Error4
DW .Error4
DW .Error4

.SystemCalls
DW .Exit // 0
DW .Beans // 1
DW .DriveAddress //2
DW .DriveWrite //3
DW .DriveRead //4

.Files
// Space for File Info
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0 // stopper

.SpecialVariables
	// OS Variables
	// Stores whether the OS has already booted.
	.Booted
	DW 0

	// Interpreter Variables
	.Pointer
	// Stores the address of the next instruction to be executed.
	DW 0

	.Instruction
	// Stores the next instruction to be executed.
	DW 0

	.End
	// Stores the end of the program being executed.
	DW 0

	// File Scan Variables
	.ScanPointer
	// Stores the address for the pointer scanning the storage for files
	DW .KernelMemoryLimit

	.FileNumber
	// Stores the number of the file currently scanning (is multiplied by two. Ex: File 3 => FileNumber = 6)
	DW 0

	.FileInfoPointer
	// Stores the pointer of the File Info Double Word for the file currently scanning
	DW 0

.Constants
	// Stores 0x69
	.SixNine
	DW 0x69

	// Stores the limit of the memory for programs (inclusive)
	.ProgramMemoryLimit
	DW 0xFFFF

	// Stores the limit of the memory for the kernel (exclusive)
	.KernelMemoryLimit
	DW 0x0400

.Boot
    LOD R1, .Booted
    BZN .CheckPorts, R1
    STR .Booted, 1

	// Here should go stuff that would happen on first launch of the OS

	// (Continues to .CheckPorts)
	BRA .CheckPorts
.CheckPorts
    OUT %254, 79
    IN R1, %254
    BZR .Warning0, R1
    OUT %254, 121
    IN R1, %254
    BZR .Warning1, R1

.ScanFiles
	// Write to .Files
	LOD R2, .FileNumber
	ADD R1, R2, .Files
	STR .FileInfoPointer, R1

    LOD R2, .ScanPointer
	LOD R2, R2

	AND R3, R2, 0xC000 // 1100 0000 0000 0000 // type of header

    BZR .Shell, R3 // If nothing quit scan process
	// 00 = EMPTY; 01 = HEADER; 10 = BODY; 11 = ??

	LOD R2, .ScanPointer
	STR R1, R2 // raw address
    LOD R2, R2

	AND R1, R2, 0x3F00 // 0011 1111 0000 0000 // length
	BSL R1, R1, 2
	MOV R3, R1 // 1111 1100 0000 0000 // length (to the left)

	// Directory is 0 // 0000 0011 0000 0000 // directory

	AND R1, R2, 0x00FF // 0000 0000 1111 1111 // name
	OR R1, R1, R3 // 1111 1100 1111 1111

	LOD R2, .FileInfoPointer
    INC R2, R2
	STR R2, R1

	// Update .ScanPointer for the next cycle and increment .FileNumber
	.ContinueMoment
	LOD R1, .ScanPointer
	LOD R2, R1
    AND R2, R2, 0x3F00 // 0011 1111 0000 0000 // length

	BSR R2, R2, 3 //length in words
	ADD R1, R1, R2

	STR .ScanPointer, R1
	LOD R1, .FileNumber
	ADD R1, R1, 2
	STR .FileNumber, R1

    BRA .ScanFiles

.Shell
OUT %79, 0x3E //>
OUT %79, 0x20 //space
PSH 0
.ShellLoop
IN R1, %79
OUT %79, R1
BRE .ShellLoopEnd, R1, 0x20
BRE .ShellLoopEnd, R1, 0x0A
PSH R1
BRE .SlashCommands, R1, 0x2F
BRA .ShellLoop
.ShellLoopEnd
POP R1
BRE .Clear, R1, 0x72
BRE .Ls, R1, 0x73
BRE .Exit, R1, 0x74
.ShellEnd2
CAL .ShellEnd
BRA .Error5

.Clear
POP R1
BNE .Error5, R1, 0x61
POP R1
BNE .Error5, R1, 0x65
POP R1
BNE .Error5, R1, 0x6C
POP R1
BNE .Error5, R1, 0x63
CAL .ShellEnd
OUT %79, 0x0C //clear console
BRA .Shell

.Ls
POP R1
BNE .Error5, R1, 0x6C
CAL .ShellEnd
BRA .ListPrograms

.Exit
POP R1
BNE .Error5, R1, 0x69 //nice
POP R1
BNE .Error5, R1, 0x78
POP R1
BNE .Error5, R1, 0x65
HLT

.SlashCommands
POP R1
BNE .Error5, R1, 0x2F
POP R1
BNE .Error5, R1, 0x2E
CAL .ShellEnd
BRA .RunProgram

.ShellEnd
POP R1
BZN .ShellEnd, R1 //this is to clean the stack
RET


.ListPrograms
    // List Programs to run
	// This is called with the ls command

	// Display loaded files
	OUT %79, 0x46 // "F"
	OUT %79, 0x69 // "i" // nice
	OUT %79, 0x6C // "l"
	OUT %79, 0x65 // "e"
	OUT %79, 0x73 // "s"
	OUT %79, 0x3A // ":"
	OUT %79, 0x20 // " "

	INC R1, .Files
	.Loop
    	LOD R2, R1 // load file header
		// check if file
		BZR .LoopEnd, R2 // exit if zero (no file)

		// continue if file

		AND R2, R2, 0x00FF
		OUT %79, R2 // name
		OUT %79, 0x2C // ","
		OUT %79, 0x20 // " "

		ADD R1, R1, 2
		BRA .Loop
	.LoopEnd
	OUT %79, 0x0A
	BRA .Shell
.RunProgram
	IN R2, %79
	OUT %79, R2
    AND R2, R2, 0x0F
    BRG .Error3, R2, 9 //file doesn't exist

	LSH R2, R2
	ADD R1, R2, .Files
	MOV R2, R1
	LOD R1, R1
    BZR .Error3, R1 //file doesn't exist
	
	OUT %79, 0x0A
	DEC R1, R1
	STR .Pointer, R1

	//Storing the end of the file
	MOV R1, R2
	INC R1, R1
	LOD R1, R1 //Getting the file info
	AND R1, R1, 0xFC00 //getting the length of the file //1111 1100 0000 0000
	BSR R1, R1, 5 //turning the pages length into word length
	DEC R1, R1
	LOD R2, R2 //loading the starting address of the file
	ADD R2, R1, R2 //adding the starting address to the length
	STR .End, R2 //storing that into .end as that is the end of the file
	// (Continues to .InterpretationLoop)

.InterpretationLoop
	// Interpretation Loop - Run the desired program calling .Execute per instruction

	// Check if instruction pointer is looking at metadata and if so, skip word
	LOD R1, .Pointer
	INC R1, R1
    AND R2, R1, 0x1F
	BZN .stuff, R2
	INC R1, R1

    .stuff
	LOD R2, .End
    SUB R2, R1, R2
    BZR .Shell, R2
	// Update PC
	STR .Pointer, R1

	// Load .Instruction
	LOD R2, R1
	OUT %79, R2
	STR .Instruction, R2

	CAL .Execute

	BRA .InterpretationLoop
// Execute the instruction stored in memory utlizing the Instruction-Address Table for quicker branching.
.Execute
    LOD R1, .Instruction

    AND R3, R1, 0x1F
	BZR .ExecEnd, R3

	IMM R2, .InstructionAddressTable
	ADD R1, R1, R2

    LOD R2, R1
    CAL R2 
	.ExecEnd
	RET

// Instructions
.Push
	LOD R1, .Pointer
	INC R1, R1
	STR .Pointer, R1

	LOD R2, R1
	PSH R2
	RET
	
.Pop
	POP R0
	RET

.And
	POP R2
	POP R1
	AND R1, R1, R2
	PSH R1
	RET

.Or
	POP R2
	POP R1
	OR R1, R1, R2
	PSH R1
	RET

.Xor
	POP R2
	POP R1
	XOR R1, R1, R2
	PSH R1
	RET

.Not
	POP R1
	NOT R1, R1
	PSH R1
	RET

.Increment
	POP R1
	INC R1, R1
	PSH R1
	RET

.Decrement
	POP R1
	DEC R1, R1
	PSH R1
	RET

.Add
	POP R2
	POP R1
	ADD R1, R1, R2
	PSH R1
	RET

.Subtract
	POP R1 // -1
	POP R2 // -2
	SUB R1, R1, R2 // -1 - -2
	PSH R1
	RET

.Multiply
	POP R2
	POP R1
	MLT R1, R1, R2
	PSH R1
	RET

.Divide
	POP R2
	POP R1
	DIV R1, R1, R2
	PSH R1
	RET

.Modulo
	POP R2
	POP R1
	MOD R1, R1, R2
	PSH R1
	RET

.ShiftLeft
	POP R2
	POP R1
	BSL R1, R1, R2
	PSH R1
	RET

.ShiftRight
	POP R2
	POP R1
	BSR R1, R1, R2
	PSH R1
	RET

.BranchIfZero // TODO verify to not jump outside program // TODO make jump relative
	POP R1 // -1
	POP R2 // -2
	BZN .BRZEnd, R1 // Branches depending on -1, to -2
    LOD R1, .KernelMemoryLimit
	BRL .Error1, R2, R1 //trying to jump to kernel
	LOD R1, .Pointer
	ADD R1, R1, R2
	DEC R1, R1
	STR .Pointer, R1
	.BRZEnd
	RET

.BranchIfNotZero
	POP R1
	POP R2
	BZR .BNZEnd, R1
    LOD R1, .KernelMemoryLimit
	BRL .Error1, R2, R1 //trying to jump to kernel
	LOD R1, .Pointer
	ADD R1, R1, R2
	DEC R1, R1
	STR .Pointer, R1
	.BNZEnd
	RET

.BranchIfPositive
	POP R1
	POP R2
	OR R1, R1, R1
	BRN .BRPEnd
    LOD R1, .KernelMemoryLimit
	BRL .Error1, R2, R1 //trying to jump to kernel
	LOD R1, .Pointer
	ADD R1, R1, R2
	DEC R1, R1
	STR .Pointer, R1
	.BRPEnd
	RET

.BranchIfNegative
	POP R1
	POP R2
	OR R1, R1, R1
	BRP .BRNEnd
    LOD R1, .KernelMemoryLimit
	BRL .Error1, R2, R1 //trying to jump to kernel
	LOD R1, .Pointer
	ADD R1, R1, R2
	DEC R1, R1
	STR .Pointer, R1
	.BRNEnd
	RET

.LoadMemory
	POP R1

	// Check if address is addressing kernel
	LOD R2, .KernelMemoryLimit
	BRL .Error0, R1, R2

	LOD R2, R1
	PSH R2
	RET
.StoreMemory
	POP R1

	// Check if address is adressing kernel
	LOD R2, .KernelMemoryLimit
	BRL .Error0, R1, R2

	POP R2
	STR R1, R2
	PSH R1
	RET
.Input
	IN R1, %79
	PSH R2
	RET

.Output
	POP R2
	OUT %79, R2
	RET

.Swap
	POP R1
	POP R2
	DEC R1
	MOV R3, VSP //save return stack address
	SUB VSP, VSP, R1 //subtract to reach the swap section
	POP R1
	PSH R2
	MOV VSP, R3
	PSH R1
	RET

.Copy
	POP R1
	PSH R1
	PSH R1
	RET

.SystemCall
    POP R1

    AND R1, R1, 0x0F
	// Only 16 system calls? (For now?)
	BRG .Error2, R1, 4 //system call does not exist
	BZR .Shell, R1

	IMM R2, .SystemCalls
	ADD R1, R1, R2

    LOD R2, R1
    CAL R2

	RET

// System Calls
.Exit
	// Exit (CPU)
	// Halt the CPU, exiting the OS
	HLT

.Beans
	// Output "Beans!"

	OUT %79, 0x42 //B
	OUT %79, 0x65 //e
	OUT %79, 0x61 //a
	OUT %79, 0x6E //n
	OUT %79, 0x73 //s
	OUT %79, 0x21 //!
	RET

.DriveAddress
	//Output Address
	POP R2
	OUT %121, R2
	PSH R2
	RET

.DriveWrite
	//Write
	POP R2
	OUT %123, R2
	PSH R2
	RET

.DriveRead
	//Read
	IN R2, %123
	PSH R2
	RET
.Error
    //Prints "Error (number)"
    OUT %79, 0x45 //E
    OUT %79, 0x72 //r
    OUT %79, 0x72 //r
    OUT %79, 0x6F //o
    OUT %79, 0x72 //r
    OUT %79, 0x20 //space
    OUT %79, R1
    OUT %79, 0x0A
    BRA .Shell
.Warning
    //Prints "Warning (number)"
    OUT %79, 0x57 //W
    OUT %79, 0x61 //a
    OUT %79, 0x72 //r
    OUT %79, 0x6E //n
    OUT %79, 0x69 //i nice
    OUT %79, 0x6E //n
    OUT %79, 0x67 //g
    OUT %79, 0x20 //space
    RET
.Error0
    IMM R1, 0x30
    BRA .Error
.Error1
    IMM R1, 0x31
    BRA .Error
.Error2
    IMM R1, 0x32
    BRA .Error
.Error3
	OUT %79, 0x0A
    IMM R1, 0x33
    BRA .Error
.Error4
	IMM R1, 0x34
	BRA .Error
.Error5
	IMM R1, 0x35
	BRA .Error
.Warning0
    BRA .Warning
    OUT %79, 0x30
    OUT %79, 0x0A
    RET
.Warning1
    BRA .Warning
    OUT %79, 0x31
    OUT %79, 0x0A
    RET
